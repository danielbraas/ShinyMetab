data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, grep('Exp|FC|Labeled', names(MS_data))) %>%
gather(Exp, Value,-Name,-Condition) %>%
arrange(Name, Condition) %>%
group_by(Name) %>%
mutate(Nr.NA = sum(is.na(Value)),
Nr.Samples = n()) %>%
filter(Nr.NA < Nr.Samples - 1) %>%
ungroup() %>%
select(-Nr.NA,-Nr.Samples) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
spread(Condition_Exp, Value)
}
head(data9)
data9[is.na(data9)] <- 0
# Filter out columns without any data
data9 <- select(data9, contains('Name'),
which(sapply(data9[,2:length(data9)], sum) != 0))
data5 = as.matrix(data9[2:length(data9)])
rownames(data5) <- data9$Name
head(data9)
if (sum(grepl('MID', names(MS_data))) >= 1) {
data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, Iso, contains('MID')) %>%
gather(Exp, Value,-Name,-Condition,-Iso) %>%
arrange(Name, Condition) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
unite(Name_Iso, c(Name, Iso), sep = '_') %>%
spread(Condition_Exp, Value)
data9 <- data9[!(rowSums(data9[2:length(data9)], na.rm = T) == 0), ]
} else {
data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, grep('Exp|FC|Labeled', names(MS_data))) %>%
gather(Exp, Value,-Name,-Condition) %>%
arrange(Name, Condition) %>%
group_by(Name) %>%
mutate(Nr.NA = sum(is.na(Value)),
Nr.Samples = n()) %>%
filter(Nr.NA < Nr.Samples - 1) %>%
ungroup() %>%
select(-Nr.NA,-Nr.Samples) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
spread(Condition_Exp, Value)
}
data9[is.na(data9)] <- 0
data5 = as.matrix(data9[2:length(data9)])
rownames(data5) <- data9$Name
# Filter out rows without any data
data5 <- data5[!(rowSums(data5)) == 0, ]
sapply(data5, sum) != 0
dim(data5)
head(data5)
filter(amounts3, ANOVA <= 0.05)
sapply(data5, sum)
apply(data5, 2, sum)
which(apply(data5, 2, sum) != 0)
data5 <- data5[,which(apply(data5, 2, sum) != 0)]
head(data5)
test <- data9
select(data9, contains('Name'),
which(sapply(data9[,2:length(data9)], sum) != 0))
library(ShinyMetab)
library(shiny); runApp('module_tester.R')
runApp('module_tester.R')
setwd("C:/Users/Daniel/Dropbox/R_projects/medium_test")
load('AG-08202017.rdata')
filter(amounts3, ANOVA <= 0.05)
list.files()
Title <- 'AG-08202017'
test <- make_matrix(amounts3, Title)
MS_data <- amounts3
anova <- 0.05
# Check if any ANOVA values are equal or below the cutoff; set cutoff to 1 if all values are below
if(sum(MS_data$ANOVA <= anova, na.rm = T) == 0) {
message('All ANOVA values are above the cutoff. Setting ANOVA cutoff to 1!')
anova <- 1
Title <- paste0(Title, '_ANOVA_cutoff_1')
}
# Find out what kind of input matrix is, ie relative amounts, MIDs etc
type <- names(MS_data)[str_detect(names(MS_data), 'Exp|MID|FC|Labeled')] %>%
str_remove('( )?[0-9]+$') %>%
unique()
switch(type,
Exp = ext <- 'Relative Amounts',
MID = ext <- 'MIDs',
FC = ext <- 'Fractional Contribution',
Labeled = ext <- 'Percent Labeled'
)
if (sum(grepl('MID', names(MS_data))) >= 1) {
data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, Iso, contains('MID')) %>%
gather(Exp, Value,-Name,-Condition,-Iso) %>%
arrange(Name, Condition) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
unite(Name_Iso, c(Name, Iso), sep = '_') %>%
spread(Condition_Exp, Value)
data9 <- data9[!(rowSums(data9[2:length(data9)], na.rm = T) == 0), ]
} else {
data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, grep('Exp|FC|Labeled', names(MS_data))) %>%
gather(Exp, Value,-Name,-Condition) %>%
arrange(Name, Condition) %>%
group_by(Name) %>%
mutate(Nr.NA = sum(is.na(Value)),
Nr.Samples = n()) %>%
filter(Nr.NA < Nr.Samples - 1) %>%
ungroup() %>%
select(-Nr.NA,-Nr.Samples) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
spread(Condition_Exp, Value)
}
data9[is.na(data9)] <- 0
data5 <- as.matrix(data9[2:length(data9)])
rownames(data5) <- data9$Name
# Filter out rows and columns without any data
data5 <- data5[!(rowSums(data5)) == 0, ]
data5 <- data5[,which(apply(data5, 2, sum) != 0)]
head(data5)
nrow(data5)
data5
dim(data5)
ncol(data5)
?matrix
data5 <- as.matrix(data9[2:length(data9)])
dim(data5)
rownames(data5) <- data9$Name
dim(data5)
# Filter out rows and columns without any data
data5 <- data5[!(rowSums(data5)) == 0, ]
dim(data5)
data5 <- as.matrix(data9[2:length(data9)])
head(data5)
# Filter out rows and columns without any data
data5 <- data5[!(rowSums(data5)) == 0, ]
head(data5)
dim(data5)
data5 <- as.matrix(data9[2:length(data9)])
rownames(data5) <- data9$Name
dim(data5)
rowSums(data5)
(rowSums(data5)) == 0
!(rowSums(data5)) == 0
data5[!(rowSums(data5)) == 0, ]
data5[!(rowSums(data5)) == 0, ] %>% dim()
data5 <- as.matrix(data9[2:length(data9)])
# Filter out rows and columns without any data
data5 <- data5[!(rowSums(data5)) == 0, ]
rownames(data5) <- data9$Name
class(data5)
head(data9)
sapply(data9[,2:length(data9)])
sapply(data9[,2:length(data9)], sum)
which(sapply(data9[,2:length(data9)], sum) == 0)
select(data9, -which(sapply(data9[,2:length(data9)], sum) == 0))
test <- data9
data9[,4] <- 0
data9
data9 <- select(data9,
-which(sapply(data9[,2:length(data9)], sum) == 0))
data9
data9 <- test
data9 <- select(data9,
-(which(sapply(data9[,2:length(data9)], sum) == 0) + 1))
data9
data9[,4] <- 0
data9 <- select(data9,
-(which(sapply(data9[,2:length(data9)], sum) == 0) + 1))
data9
data9 <- test
apply(data9[,2:length(data9)], 1, sum)
apply(data9[,2:length(data9)], 1, sum) != 0
filter(data9, apply(data9[,2:length(data9)], 1, sum) != 0)
make_matrix <- function(MS_data, Title = '', Type, anova = 0.05, folder = getwd()){
# Check if any ANOVA values are equal or below the cutoff; set cutoff to 1 if all values are below
if(sum(MS_data$ANOVA <= anova, na.rm = T) == 0) {
message('All ANOVA values are above the cutoff. Setting ANOVA cutoff to 1!')
anova <- 1
Title <- paste0(Title, '_ANOVA_cutoff_1')
}
# Find out what kind of input matrix is, ie relative amounts, MIDs etc
type <- names(MS_data)[str_detect(names(MS_data), 'Exp|MID|FC|Labeled')] %>%
str_remove('( )?[0-9]+$') %>%
unique()
switch(type,
Exp = ext <- 'Relative Amounts',
MID = ext <- 'MIDs',
FC = ext <- 'Fractional Contribution',
Labeled = ext <- 'Percent Labeled'
)
if(!grepl('/$', folder)) folder <- paste0(folder, '/')
if (sum(grepl('MID', names(MS_data))) >= 1) {
data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, Iso, contains('MID')) %>%
gather(Exp, Value,-Name,-Condition,-Iso) %>%
arrange(Name, Condition) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
unite(Name_Iso, c(Name, Iso), sep = '_') %>%
spread(Condition_Exp, Value)
data9 <- data9[!(rowSums(data9[2:length(data9)], na.rm = T) == 0), ]
} else {
data9 <- MS_data %>%
filter(ANOVA <= anova) %>%
select(Name, Condition, grep('Exp|FC|Labeled', names(MS_data))) %>%
gather(Exp, Value,-Name,-Condition) %>%
arrange(Name, Condition) %>%
group_by(Name) %>%
mutate(Nr.NA = sum(is.na(Value)),
Nr.Samples = n()) %>%
filter(Nr.NA < Nr.Samples - 1) %>%
ungroup() %>%
select(-Nr.NA,-Nr.Samples) %>%
unite(Condition_Exp, c(Condition, Exp), sep = '_') %>%
mutate(Condition_Exp = factor(Condition_Exp, levels = unique(Condition_Exp))) %>%
spread(Condition_Exp, Value)
}
data9[is.na(data9)] <- 0
# Filter out rows and columns without any data
data9 <- filter(data9, apply(data9[,2:length(data9)], 1, sum) != 0)
data9 <- select(data9,
-(which(sapply(data9[,2:length(data9)], sum) == 0) + 1))
data5 <- as.matrix(data9[2:length(data9)])
rownames(data5) <- data9$Name
# Filter out rows and columns without any data
#data5 <- data5[!(rowSums(data5)) == 0, ]
#data5 <- data5[,which(apply(data5, 2, sum) != 0)]
# Save matrix data
write.csv(data5, file = paste0(Title, '_Heatmap_', ext, '.csv'))
return(data5)
}
test <- make_matrix(amounts3, Title)
make_pheatmap(test)
make_pheatmap(test, info, Title = Title)
test
matrix <- test
test1 <- make_matrix(data3, Title)
make_pheatmap(test1)
make_pheatmap(test1, Title = Title)
make_pheatmap(test, Title = Title)
mmatrix
matrix
# Make normalizing metabolite = 1 if none is presented
if(length(Norv) == 1) Norv = rep(1, ncol(matrix))
Norv = 1
# Make normalizing metabolite = 1 if none is presented
if(length(Norv) == 1) Norv = rep(1, ncol(matrix))
# Find out what kind of input matrix is, ie relative amounts, MIDs etc
type <- str_remove(colnames(matrix), '^(.)*_') %>%
str_remove('( )?[0-9]+$') %>%
unique()
switch(type,
Exp = ext <- 'Relative Amounts',
MID = ext <- 'MIDs',
FC = ext <- 'Fractional Contribution',
Labeled = ext <- 'Percent Labeled'
)
# Make sure the folder has a "/" at the end
if(!grepl('/$', folder)) folder <- paste0(folder, '/')
#if (exists('samples')==F) samples <- info   # Important for heatmap annotation
ann <- select(samples, Condition, Cell.Number) %>%
as.data.frame()
samples <- info
#if (exists('samples')==F) samples <- info   # Important for heatmap annotation
ann <- select(samples, Condition, Cell.Number) %>%
as.data.frame()
rownames(ann) <- colnames(matrix)
ann_colors = list(    # This names list defines the colors for sample groups
Condition = colors[1:length(unique(gsub('_(.)*','', colnames(matrix))))],
Norvaline = c("white", "blue"),
Cell.Number = c("white", "green")
)
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyMetab/module_tester.R')
library(ShinyMetab)
library(shiny); runApp('module_tester.R')
setwd("C:/Users/Daniel/Dropbox/R_projects/medium_test")
load('AG-08202017.rdata')
filter(amounts3, ANOVA <= 0.05)
test <- make_matrix(amounts3, Title = 'Test')
Title <- 'Test'
make_pheatmap(test, Title = Title)
make_pheatmap(test, Title = Title, samples = info)
matrix <- test
Norv = 1
# Make normalizing metabolite = 1 if none is presented
if(length(Norv) == 1) Norv = rep(1, ncol(matrix))
Norv
# Find out what kind of input matrix is, ie relative amounts, MIDs etc
type <- str_remove(colnames(matrix), '^(.)*_') %>%
str_remove('( )?[0-9]+$') %>%
unique()
switch(type,
Exp = ext <- 'Relative Amounts',
MID = ext <- 'MIDs',
FC = ext <- 'Fractional Contribution',
Labeled = ext <- 'Percent Labeled'
)
# Make sure the folder has a "/" at the end
if(!grepl('/$', folder)) folder <- paste0(folder, '/')
#if (exists('samples')==F) samples <- info   # Important for heatmap annotation
ann <- select(samples, Condition, Cell.Number) %>%
as.data.frame()
rownames(ann) <- colnames(matrix)
samples <- filter(info,
!str_detect(Condition,
'unspent|[Bb]lank|[Ff]resh|[Cc]ontrol|[Mm]edium|[Mm]edia'))
#if (exists('samples')==F) samples <- info   # Important for heatmap annotation
ann <- select(samples, Condition, Cell.Number) %>%
as.data.frame()
rownames(ann) <- colnames(matrix)
ann_colors = list(    # This names list defines the colors for sample groups
Condition = colors[1:length(unique(gsub('_(.)*','', colnames(matrix))))],
Norvaline = c("white", "blue"),
Cell.Number = c("white", "green")
)
if (exists('Norv')==T) {    # Show normalization value in each sample if set
ann$Norvaline <- Norv     # This could become an anker for Shiny
} else {
ann_colors$Norvaline <- NULL  # Don't show norvaline trace
}
names(ann_colors[['Condition']]) <- unique(gsub('_(.)*','',colnames(matrix)))
matrix[is.na(matrix)] <- 0
heatmap.title = paste0(folder, Title, '_Heatmap_',ext,'.pdf', sep='')
folder <- getwd()
heatmap.title = paste0(folder, Title, '_Heatmap_',ext,'.pdf', sep='')
pheatmap::pheatmap(matrix, cluster_row = T, cluster_col = T,
clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
heat.color = c('navy','grey90','firebrick3')
pheatmap::pheatmap(matrix, cluster_row = T, cluster_col = T,
clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
matrix
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
pheatmap::pheatmap(matrix, cluster_row = T, cluster_col = T,
clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
rbind(matrix, matrix)
test1 <- matrix
matrix <- rbind(matrix, matrix)
pheatmap::pheatmap(matrix, cluster_row = T, cluster_col = T,
clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
is.na(matrix)
matrix <- test1
pheatmap::pheatmap(matrix)
pheatmap::pheatmap(matrix, cluster_rows = F)
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = F,
#clustering_distance_rows = 'correlation',
#clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
filename = heatmap.title)
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = F,
#clustering_distance_rows = 'correlation',
#clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = F,
#clustering_distance_rows = 'correlation',
#clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
dev.off()
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = F,
#clustering_distance_rows = 'correlation',
#clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
#clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols = 'correlation',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols = NULL,
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols = NA,
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
?pheatmap::pheatmap
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols = '',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols,
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
#clustering_distance_rows = 'correlation',
clustering_distance_cols = 'eucledian',
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'))
nrow(matrix)
pheatmap::pheatmap(matrix, cluster_row = F, cluster_col = T,
color = colorRampPalette(heat.color)(100),
border_color = "black", scale = "row",
cellwidth = 20, cellheight = 10,
annotation = ann, annotation_colors = ann_colors,
show_colnames = F, main = paste(Title,ext,sep = '-'),
#filename = heatmap.title)
)
library(ShinyMetab)
library(ShinyMetab)
install.packages(c("backports", "BMA", "broom", "colorspace", "config", "fda", "foghorn", "geepack", "ggrepel", "googlePolylines", "gridGraphics", "here", "jsonlite", "lubridate", "parallelly", "patchwork", "pbkrtest", "pkgbuild", "plotly", "r2d3", "RcppEigen", "rlang", "RMariaDB", "rmarkdown", "RMySQL", "spam", "spam64", "sparklyr", "spatstat.data", "StanHeaders", "testthat", "tinytest", "tinytex", "vctrs"))
install.packages(c("foreign", "Matrix"), lib="C:/R/library")
shiny::runApp('inst/extdata')
help(package="ShinyMetab")
shiny::runApp('inst/extdata')
library(ShinyMetab)
shiny::runApp('inst/extdata')
library(ShinyMetab)
help(package='shinyMetab')
shiny::runApp('inst/extdata')
help(package = 'ShinyMetab')
library(ShinyMetab)
